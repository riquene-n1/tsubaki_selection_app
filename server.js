const express = require('express');
const oracledb = require('oracledb');
const bcrypt = require('bcrypt');
const app = express();
app.use(express.json());

// Oracle DB connection configuration
const dbConfig = {
  user: 'TSUBAKIAPP',
  password: 'tsubaki1234',
  connectString: 'TSUBAKIAPP'
};

async function getConnection() {
  return await oracledb.getConnection(dbConfig);
}

// Create users table if it doesn't exist
async function ensureTable() {
  let conn;
  try {
    conn = await getConnection();
    await conn.execute(`
      BEGIN
        EXECUTE IMMEDIATE 'CREATE TABLE users (
          id NUMBER GENERATED BY DEFAULT AS IDENTITY,
          email VARCHAR2(255) UNIQUE NOT NULL,
          password VARCHAR2(255) NOT NULL,
          gender VARCHAR2(10),
          age NUMBER,
          phone VARCHAR2(50),
          company VARCHAR2(100),
          position VARCHAR2(100),
          PRIMARY KEY(id)
        )';
      EXCEPTION
        WHEN OTHERS THEN
          IF SQLCODE != -955 THEN RAISE; END IF;
      END;`);
  } finally {
    if (conn) await conn.close();
  }
}
ensureTable().catch(err => console.error(err));

app.post('/api/register', async (req, res) => {
  const { email, password, gender, age, phone, company, position } = req.body;
  if (!email || !password) return res.status(400).json({ message: 'Email and password required' });
  const hashed = await bcrypt.hash(password, 10);
  let conn;
  try {
    conn = await getConnection();
    await conn.execute(
      `INSERT INTO users (email, password, gender, age, phone, company, position)
       VALUES (:email, :password, :gender, :age, :phone, :company, :position)`,
      { email, password: hashed, gender, age, phone, company, position },
      { autoCommit: true }
    );
    res.json({ message: 'registered' });
  } catch (e) {
    res.status(500).json({ message: e.message });
  } finally {
    if (conn) await conn.close();
  }
});

app.post('/api/login', async (req, res) => {
  const { email, password } = req.body;
  if (!email || !password) return res.status(400).json({ message: 'Missing credentials' });
  let conn;
  try {
    conn = await getConnection();
    const result = await conn.execute('SELECT * FROM users WHERE email=:email', { email }, { outFormat: oracledb.OUT_FORMAT_OBJECT });
    const user = result.rows[0];
    if (!user) return res.status(401).json({ message: 'Invalid user' });
    const valid = await bcrypt.compare(password, user.PASSWORD);
    if (!valid) return res.status(401).json({ message: 'Invalid password' });
    res.json({ name: user.EMAIL });
  } catch (e) {
    res.status(500).json({ message: e.message });
  } finally {
    if (conn) await conn.close();
  }
});

const port = process.env.PORT || 3000;
app.listen(port, () => console.log(`Server running on ${port}`));
